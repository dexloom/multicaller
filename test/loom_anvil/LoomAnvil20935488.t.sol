// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.28;

import "../Interface.sol";
import "foundry-huff/HuffDeployer.sol";
import {Test} from "forge-std/Test.sol";

contract LoomAnvil20935488 is Test {
    address public constant OWNER = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;
    address public constant UNDER_TEST = 0xFCfCfcfC0AC30164AFdaB927F441F2401161F358;
    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    address public constant COINBASE = 0x881e747c5C2e0366d4Fd6F9f95780467C6549732;

    function setUp() public {}

    // ITO KOBOSU WETH ARB CASE
    // TEST for: 0xf9da422be59beb73438586da11601400b66d7b4246d665477f0ebc84646df8d9
    function test_ItoKobosuWeth() public {
        string memory rpc = vm.envString("MAINNET_HTTP");
        uint forkId = vm.createFork(rpc, hex"7f35c37787d9b6ba1ad2c72b5996d62bb5c0abe62521db0fa4f7e44459cd4803"); // <- tx after our tx for back running
        vm.selectFork(forkId);

        vm.label(COINBASE, "coinbase");
        vm.label(UNDER_TEST, "multicaller");

        // pools
        vm.label(0x49aF5fB5de94C93Ee83Ad488Fe8CAb30b0ef35f2, "kobosu_weth_uni3");
        vm.label(0xf382839b955ab57cc1E041F2c987a909C9A48Af1, "kobosu_ito_uni2");
        vm.label(0x322BBA387c825180ebfB62bD8E6969EBe5b5e52d, "ito_weth_uni2");

        // tokens
        vm.label(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, "weth");
        vm.label(0x465dbC39F46f9D43C581a5d90A43e4a0F2A6fF2d, "ito");
        vm.label(0xCEb67a66c2c8a90980dA3A50A3F96c07525a26Cb, "kabosu");

        MultiCaller multicaller = MultiCaller(HuffDeployer.deploy("Multicaller"));
        bytes memory code = address(multicaller).code;
        vm.etch(UNDER_TEST, code);

        bytes
            memory calldataBytes = hex"28472417000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004947ffc0000000000000000040449af5fb5de94c93ee83ad488fe8cab30b0ef35f2128acb08000000000000000000000000fcfcfcfc0ac30164afdab927f441f2401161f358000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000003bb30908399e00000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003347ffe00008200000000000024ceb67a66c2c8a90980da3a50a3f96c07525a26cb70a08231000000000000000000000000fcfcfcfc0ac30164afdab927f441f2401161f3587ffc00000000008200440044ceb67a66c2c8a90980da3a50a3f96c07525a26cba9059cbb000000000000000000000000f382839b955ab57cc1e041f2c987a909c9a48af100000000000000000000000000000000000000000000000000000000000000007ffd0000000000820030004495b66162000000000000000000000000f382839b955ab57cc1e041f2c987a909c9a48af100000000000000000000000000000000000000000000000000000000000000007ffc000000000082002400a4f382839b955ab57cc1e041f2c987a909c9a48af1022c0d9f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000322bba387c825180ebfb62bd8e6969ebe5b5e52d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000007ffd0000000000820030004484f16ca0000000000000000000000000322bba387c825180ebfb62bd8e6969ebe5b5e52d00000000000000000000000000000000000000000000000000000000000000017ffc000000000082004400a4322bba387c825180ebfb62bd8e6969ebe5b5e52d022c0d9f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fcfcfcfc0ac30164afdab927f441f2401161f358000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000007ffc00000000000000000044c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2a9059cbb00000000000000000000000049af5fb5de94c93ee83ad488fe8cab30b0ef35f200000000000000000000000000000000000000000000000003bb30908399e0000000000000000000000000007ffd0000000000000000006405ec9cad000000000000000000000000000000000000000000000000001dc0a01ecbd916000000000000000000000000000000000000000000000000000953130a130466000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000";

        vm.coinbase(COINBASE);

        assertEq(COINBASE.balance, 0 ether);
        assertEq(OWNER.balance, 3227);

        // under test
        vm.prank(OWNER);
        (bool res, ) = address(UNDER_TEST).call{value: 0 ether}(calldataBytes);

        assert(res);
        assertEq(OWNER.balance, 0.006041576242900994 ether);
        assertEq(COINBASE.balance, 0.002624616028898406 ether);
    }
}
