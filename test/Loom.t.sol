//
// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.15;

import "../src/ERC20.sol";
import "./Interface.sol";
import "foundry-huff/HuffDeployer.sol";
import {Test, console} from "forge-std/Test.sol";


contract TestLoom is Test {
    address constant public OWNER = 0xE6F1d328E607CB8B3DF25efAF60A8890ED6A1A7c;
    address constant public UNDER_TEST = 0x7878787878787878787878787878787878787878;
    address constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);


    function setUp() public {}

    // TEST for: 0xdc89197a90ba2c9f9a285cc7335b8f0917413d85bebd1764110d786a4753bde2
    function test_Loom() public {
        string memory rpc = vm.envString("MAINNET_HTTP");
        //uint forkId = vm.createFork(rpc, hex"f9da422be59beb73438586da11601400b66d7b4246d665477f0ebc84646df8d9"); // TX before
        uint forkId = vm.createFork(rpc, hex"7f35c37787d9b6ba1ad2c72b5996d62bb5c0abe62521db0fa4f7e44459cd4803"); // TX before
        vm.selectFork(forkId);

        MultiCaller multicaller = MultiCaller(HuffDeployer.deploy("Multicaller"));
        bytes memory code = address(multicaller).code;
        vm.etch(UNDER_TEST, code);

        bytes memory calldataBytes = hex"28472417000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004d47ffc0000000000000000044449af5fb5de94c93ee83ad488fe8cab30b0ef35f2128acb080000000000000000000000007878787878787878787878787878787878787878000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000003bb30908399e00000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003747ffe00008200000000000024ceb67a66c2c8a90980da3a50a3f96c07525a26cb70a0823100000000000000000000000078787878787878787878787878787878787878787ffc00000000008200440044ceb67a66c2c8a90980da3a50a3f96c07525a26cba9059cbb000000000000000000000000f382839b955ab57cc1e041f2c987a909c9a48af100000000000000000000000000000000000000000000000000000000000000007ffd00000000000000000004fcccdd987ffd0000000000820030004495b66162000000000000000000000000f382839b955ab57cc1e041f2c987a909c9a48af100000000000000000000000000000000000000000000000000000000000000007ffd00000000000000000004fcccdd987ffc000000000082002400a4f382839b955ab57cc1e041f2c987a909c9a48af1022c0d9f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000322bba387c825180ebfb62bd8e6969ebe5b5e52d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000007ffd00000000000000000004fcccdd987ffd0000000000820030004484f16ca0000000000000000000000000322bba387c825180ebfb62bd8e6969ebe5b5e52d00000000000000000000000000000000000000000000000000000000000000017ffd00000000000000000004fcccdd987ffc000000000082004400a4322bba387c825180ebfb62bd8e6969ebe5b5e52d022c0d9f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007878787878787878787878787878787878787878000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000007ffc00000000000000000044c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2a9059cbb00000000000000000000000049af5fb5de94c93ee83ad488fe8cab30b0ef35f200000000000000000000000000000000000000000000000003bb30908399e0000000000000000000000000007ffd0000000000000000006405ec9cad000000000000000000000000000000000000000000000000001b9233b6d209b4000000000000000000000000000000000000000000000000001b9233b6d209b4000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000";

        //ERC20 weth = ERC20(WETH);
        //vm.prank(0x8EB8a3b98659Cce290402893d0123abb75E3ab28);
        //weth.transfer(UNDER_TEST, 1.0 ether);

        vm.prank(OWNER);
        vm.deal(OWNER, 10 ether);
        (bool res,) = address(UNDER_TEST).call{value: 0 ether}(calldataBytes);
        assert(res);
    }

}