// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.15;

import "foundry-huff/HuffDeployer.sol";
import "forge-std/Test.sol";
import "forge-std/console.sol";

import "./mocks/ERC20.sol";
import "./interfaces/dydx/ISoloMargin.sol";
import "./Interface.sol";
import "./Helper.sol";

contract MulticallerSwapStep5Test is Test, TestHelper {
    function test_multiswap() public {
        bytes[1] memory call_data = [
            bytes(
                hex"28472417000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000007687ffc00000000000000000324787878787878787878787878787878787878787828472417000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002d47ffd0000000000000000004495b661620000000000000000000000004a86c01d67965f8cb3d0aaa2c655705e64097c31000000000000000000000000000000000000000000000000114d0a7e6f3e34007ffc000000000082002402644a86c01d67965f8cb3d0aaa2c655705e64097c31022c0d9f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007878787878787878787878787878787878787878000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001ac7ffe000082000000000000240f2d719407fdbeff09d87557abb7232601fd9f2970a0823100000000000000000000000078787878787878787878787878787878787878787ffc000082002082006400e42dd35b4da6534230ff53048f7477f17f7f4e7a70128acb0800000000000000000000000078787878787878787878787878787878787878780000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000140f2d719407fdbeff09d87557abb7232601fd9f290000000000000000000000007ffc00000000000000000044c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2a9059cbb0000000000000000000000004a86c01d67965f8cb3d0aaa2c655705e64097c31000000000000000000000000000000000000000000000000114d0a7e6f3e340000000000000000000000000000000000000000000000000000000000000000007ffc00000000000000000404787878787878787878787878787878787878787828472417000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003a47ffc0000000000000000038448da0965ab2d2cbf1c17c09cfb5cbe67ad5b1406128acb080000000000000000000000007878787878787878787878787878787878787878000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000009cf7ae36643375961000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002bf7ffe00008200000000000024dac17f958d2ee523a2206206994597c13d831ec770a0823100000000000000000000000078787878787878787878787878787878787878787ffc000082000082006400e4ebce363564fa8b55d85aaf681156087116b148db128acb08000000000000000000000000787878787878787878787878787878787878787800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffd8963efd1fc6a506488495d951d5263988d2500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000014dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007ffb00000000000000000003082a007ffc000082002082006400e42b2a82d50e6e9d5b95ca644b989f9b143ea9ede2128acb0800000000000000000000000078787878787878787878787878787878787878780000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000276a400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000014102c776ddb30c754ded4fdcc77a19230a60d4e4f0000000000000000000000007ffc000000000000000000446b175474e89094c44da98b954eedeac495271d0fa9059cbb00000000000000000000000048da0965ab2d2cbf1c17c09cfb5cbe67ad5b140600000000000000000000000000000000000000000000009cf7ae3664337596100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            )
        ];

        for (uint256 i = call_data.length; i > 0; i--) {
            uint256 gasLeft = gasleft();
            uint256 balanceBefore = weth.balanceOf(address(multicaller));
            (bool result, ) = address(multicaller).call(call_data[i - 1]);
            uint256 gasUsed = gasLeft - gasleft();
            uint256 balanceAfter = weth.balanceOf(address(multicaller));
            uint256 balanceUsed = uint256(balanceBefore) - uint256(balanceAfter);
            console.log(i, gasUsed, balanceBefore - balanceAfter);
            console.log(balanceBefore, balanceAfter);

            if (balanceUsed >= 0.02 ether || balanceUsed == 0 ether) {
                console.log(i, "failed");
                revert("failed");
            }
            assertEq(result, true);
        }
    }
}
