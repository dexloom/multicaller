#include "./utils/service/MulticallerService.huff"
#include "./utils/internalcalls/Flashbots.huff"
#include "./utils/internalcalls/Uni2.huff"
#include "./utils/Log.huff"


#define macro DO_INTERNAL_CALL() = takes(1) returns (1) {
    //[prefix, offset]
    dup1                              // [prefix, prefix, offset]
    //[_ADDRESS_MASK] and  // [target, prefix, offset]
    0xA0 shr             // [prefix >> 0xA0, target, prefix, offset]        
    [_CALL_LENGTH_MASK] and //[length, target, prefix, offset]
    dup3 
    0xC add
    mload 
    0xE0 shr //[selector, length, target, prefix, offset]

    dup1 __FUNC_SIG("transferTipsMinBalanceNoPayout(address,uint256,uint256)") eq transfertipsnopayout jumpi
    dup1 __FUNC_SIG("transferTipsMinBalance(address,uint256,uint256,address)") eq transfertips jumpi
    dup1 __FUNC_SIG("transferTipsMinBalanceWETH(uint256,uint256,address)") eq transfertipsweth jumpi
    dup1 __FUNC_SIG("uni2GetInAmountFrom0(address,uint256)") eq uni2getinamount0 jumpi
    dup1 __FUNC_SIG("uni2GetInAmountFrom1(address,uint256)") eq uni2getinamount1 jumpi
    dup1 __FUNC_SIG("uni2GetOutAmountFrom0(address,uint256)") eq uni2getoutamount0 jumpi
    dup1 __FUNC_SIG("uni2GetOutAmountFrom1(address,uint256)") eq uni2getoutamount1 jumpi
    dup1 __FUNC_SIG("uni2GetInAmountFrom0Comms(address,uint256,uint256)") eq uni2getinamount0comms jumpi
    dup1 __FUNC_SIG("uni2GetInAmountFrom1Comms(address,uint256,uint256)") eq uni2getinamount1comms jumpi
    dup1 __FUNC_SIG("uni2GetOutAmountFrom0Comms(address,uint256,uint256)") eq uni2getoutamount0comms jumpi
    dup1 __FUNC_SIG("uni2GetOutAmountFrom1Comms(address,uint256,uint256)") eq uni2getoutamount1comms jumpi
    dup1 __FUNC_SIG("logStack()") eq logstack jumpi
    dup1 __FUNC_SIG("logStackOffset(uint256)") eq logstack_offset jumpi

    0x9999 0x0 mstore 0x20 0x0 revert // RevertDebug
    
    uni2getinamount0:
        pop // [length, prefix, offset]
        dup4
        0xC add
        UNI2_GET_IN_AMOUNT_FROM_0()
        exit jump
    uni2getinamount1:
        pop // [length, prefix, offset]
        dup4
        0xC add
        UNI2_GET_IN_AMOUNT_FROM_1()
        exit jump
    uni2getoutamount0:
        pop // [length, prefix, offset]
        dup4
        0xC add
        UNI2_GET_OUT_AMOUNT_FROM_0()
        exit jump
    uni2getoutamount1:
        pop // [length, prefix, offset]
        dup4
        0xC add
        UNI2_GET_OUT_AMOUNT_FROM_1()
        exit jump

    uni2getinamount0comms:
        pop // [length, prefix, offset]
        dup4
        0xC add
        UNI2_GET_IN_AMOUNT_FROM_0_COMMS()
        exit jump
    uni2getinamount1comms:
        pop // [length, prefix, offset]
        dup4
        0xC add
        UNI2_GET_IN_AMOUNT_FROM_1_COMMS()
        exit jump
    uni2getoutamount0comms:
        pop // [length, prefix, offset]
        dup4
        0xC add
        UNI2_GET_OUT_AMOUNT_FROM_0_COMMS()
        exit jump
    uni2getoutamount1comms:
        pop // [length, prefix, offset]
        dup4
        0xC add
        UNI2_GET_OUT_AMOUNT_FROM_1_COMMS()
        exit jump


    transfertips:
        pop // [length, prefix, offset] 
        dup4
        0xC add
        TRANSFER_TIPS_MIN_BALANCE()
        pop

        exit jump
    transfertipsnopayout:
        pop // [length,  prefix, offset] 
        dup4
        0xC add
        TRANSFER_TIPS_MIN_BALANCE_NO_PAYOUT()
        exit jump

    transfertipsweth:
        pop // [length, prefix, offset]
        dup4
        0xC add
        TRANSFER_TIPS_MIN_BALANCE_WETH()
        exit jump

    logstack:
        pop // [length, prefix, offset]
        dup4
        0xC add
        LOG_STACK()
        pop
        exit jump
    logstack_offset:
        pop // [length, prefix, offset]
        dup4
        0xC add
        LOG_PARSE_IDX()
        LOG_STACK_OFFSET()
        pop


    exit:
    // [length, prefix, offset]
    swap2 // [offset,  prefix, length]
    pop // [ prefix, length]
    pop // [ length]   
    0xC add
}
